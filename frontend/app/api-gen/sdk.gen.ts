// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, formDataBodySerializer } from './client';
import type { GetApiAgentData, GetApiAgentResponses, PostApiAgentData, PostApiAgentResponses, DeleteApiAgentByIdData, DeleteApiAgentByIdResponses, GetApiAgentByIdData, GetApiAgentByIdResponses, PutApiAgentByIdData, PutApiAgentByIdResponses, PostApiAgentFromUserData, PostApiAgentFromUserResponses, PostApiAuthRegisterData, PostApiAuthRegisterResponses, PostApiAuthLoginData, PostApiAuthLoginResponses, PostApiAuthAssignRoleData, PostApiAuthAssignRoleResponses, PostApiAuthRemoveRoleData, PostApiAuthRemoveRoleResponses, GetApiAuthSearchUsersData, GetApiAuthSearchUsersResponses, PostApiAuthChangePasswordData, PostApiAuthChangePasswordResponses, DeleteApiAuthDeleteUserData, DeleteApiAuthDeleteUserResponses, GetApiConversationData, GetApiConversationResponses, PostApiConversationData, PostApiConversationResponses, GetApiConversationByIdData, GetApiConversationByIdResponses, PostApiConversationByConversationIdMessagesData, PostApiConversationByConversationIdMessagesResponses, GetApiConversationByOpportunityByOpportunityIdData, GetApiConversationByOpportunityByOpportunityIdResponses, GetApiDocumentOpportunityByOpportunityIdData, GetApiDocumentOpportunityByOpportunityIdResponses, GetApiDocumentOpportunityByOpportunityIdPublicData, GetApiDocumentOpportunityByOpportunityIdPublicResponses, DeleteApiDocumentByIdData, DeleteApiDocumentByIdResponses, GetApiDocumentByIdData, GetApiDocumentByIdResponses, PostApiDocumentUploadByOpportunityIdData, PostApiDocumentUploadByOpportunityIdResponses, GetApiDocumentByIdDownloadData, GetApiDocumentByIdDownloadResponses, GetApiDocumentByIdViewData, GetApiDocumentByIdViewResponses, GetApiDocumentByIdUrlData, GetApiDocumentByIdUrlResponses, PutApiDocumentByIdApproveData, PutApiDocumentByIdApproveResponses, PostApiEmailSendData, PostApiEmailSendResponses, GetApiEmailSmtpStatusData, GetApiEmailSmtpStatusResponses, PostApiEmailClearCacheData, PostApiEmailClearCacheResponses, PostApiEmailClearOauthCacheData, PostApiEmailClearOauthCacheResponses, GetApiExternalIntegrationData, GetApiExternalIntegrationResponses, PostApiExternalIntegrationData, PostApiExternalIntegrationResponses, DeleteApiExternalIntegrationByIdData, DeleteApiExternalIntegrationByIdResponses, GetApiExternalIntegrationByIdData, GetApiExternalIntegrationByIdResponses, PutApiExternalIntegrationByIdData, PutApiExternalIntegrationByIdResponses, GetApiFormTemplatesData, GetApiFormTemplatesResponses, PostApiFormTemplatesData, PostApiFormTemplatesResponses, DeleteApiFormTemplatesByIdData, DeleteApiFormTemplatesByIdResponses, GetApiFormTemplatesByIdData, GetApiFormTemplatesByIdResponses, PutApiFormTemplatesByIdData, PutApiFormTemplatesByIdResponses, PostApiFormSubmissionsData, PostApiFormSubmissionsResponses, DeleteApiFormSubmissionsByIdData, DeleteApiFormSubmissionsByIdResponses, PutApiFormSubmissionsByIdData, PutApiFormSubmissionsByIdResponses, PostApiFormSubmissionsByFormSubmissionIdItemsData, PostApiFormSubmissionsByFormSubmissionIdItemsResponses, DeleteApiFormSubmissionsByFormSubmissionIdItemsByFormSubmissionItemIdData, DeleteApiFormSubmissionsByFormSubmissionIdItemsByFormSubmissionItemIdResponses, PutApiFormSubmissionsByFormSubmissionIdItemsByFormSubmissionItemIdData, PutApiFormSubmissionsByFormSubmissionIdItemsByFormSubmissionItemIdResponses, GetUpData, GetUpResponses, PostApiLeadData, PostApiLeadResponses, DeleteApiOAuthEmailConfigData, DeleteApiOAuthEmailConfigResponses, GetApiOAuthEmailConfigData, GetApiOAuthEmailConfigResponses, PostApiOAuthEmailConfigData, PostApiOAuthEmailConfigResponses, PutApiOAuthEmailConfigData, PutApiOAuthEmailConfigResponses, GetApiOpportunityByIdImagesZipData, GetApiOpportunityByIdImagesZipResponses, GetApiOpportunityData, GetApiOpportunityResponses, PostApiOpportunityData, PostApiOpportunityResponses, DeleteApiOpportunityByIdData, DeleteApiOpportunityByIdResponses, GetApiOpportunityByIdData, GetApiOpportunityByIdResponses, PatchApiOpportunityByIdData, PatchApiOpportunityByIdResponses, PutApiOpportunityByIdData, PutApiOpportunityByIdResponses, GetApiOpportunityAgentByAgentIdData, GetApiOpportunityAgentByAgentIdResponses, GetApiOpportunityOrganizationByOrganizationIdData, GetApiOpportunityOrganizationByOrganizationIdResponses, GetApiOpportunityStateData, GetApiOpportunityStateResponses, PostApiOpportunityStateData, PostApiOpportunityStateResponses, DeleteApiOpportunityStateByLabelData, DeleteApiOpportunityStateByLabelResponses, GetApiOpportunityStateByLabelData, GetApiOpportunityStateByLabelResponses, PutApiOpportunityStateByLabelData, PutApiOpportunityStateByLabelResponses, GetApiOrganizationData, GetApiOrganizationResponses, PostApiOrganizationData, PostApiOrganizationResponses, DeleteApiOrganizationByIdData, DeleteApiOrganizationByIdResponses, GetApiOrganizationByIdData, GetApiOrganizationByIdResponses, PutApiOrganizationByIdData, PutApiOrganizationByIdResponses, GetApiOrganizationByIdMembersData, GetApiOrganizationByIdMembersResponses, PostApiOrganizationByIdMembersData, PostApiOrganizationByIdMembersResponses, PutApiOrganizationByIdMembersByMemberIdRoleData, PutApiOrganizationByIdMembersByMemberIdRoleResponses, DeleteApiOrganizationByIdMembersByMemberIdData, DeleteApiOrganizationByIdMembersByMemberIdResponses, PostApiProfilePictureUserData, PostApiProfilePictureUserResponses, PostApiProfilePictureOrganizationByOrganizationIdData, PostApiProfilePictureOrganizationByOrganizationIdResponses, GetApiProfilePictureUrlData, GetApiProfilePictureUrlResponses, DeleteApiProfilePictureData, DeleteApiProfilePictureResponses, GetApiTaskData, GetApiTaskResponses, PostApiTaskData, PostApiTaskResponses, DeleteApiTaskByIdData, DeleteApiTaskByIdResponses, GetApiTaskByIdData, GetApiTaskByIdResponses, PutApiTaskByIdData, PutApiTaskByIdResponses, PostApiTaskByIdCompleteData, PostApiTaskByIdCompleteResponses, PostApiTaskAgentTagData, PostApiTaskAgentTagResponses, GetApiVehicleByRegistrationNumberData, GetApiVehicleByRegistrationNumberResponses, GetApiVehicleByRegistrationNumberErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const getApiAgent = <ThrowOnError extends boolean = false>(options?: Options<GetApiAgentData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiAgentResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/Agent',
        ...options
    });
};

export const postApiAgent = <ThrowOnError extends boolean = false>(options?: Options<PostApiAgentData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostApiAgentResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/Agent',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const deleteApiAgentById = <ThrowOnError extends boolean = false>(options: Options<DeleteApiAgentByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteApiAgentByIdResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/Agent/{id}',
        ...options
    });
};

export const getApiAgentById = <ThrowOnError extends boolean = false>(options: Options<GetApiAgentByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiAgentByIdResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/Agent/{id}',
        ...options
    });
};

export const putApiAgentById = <ThrowOnError extends boolean = false>(options: Options<PutApiAgentByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutApiAgentByIdResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/Agent/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postApiAgentFromUser = <ThrowOnError extends boolean = false>(options?: Options<PostApiAgentFromUserData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostApiAgentFromUserResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/Agent/from-user',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const postApiAuthRegister = <ThrowOnError extends boolean = false>(options?: Options<PostApiAuthRegisterData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostApiAuthRegisterResponses, unknown, ThrowOnError>({
        url: '/api/Auth/register',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const postApiAuthLogin = <ThrowOnError extends boolean = false>(options?: Options<PostApiAuthLoginData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostApiAuthLoginResponses, unknown, ThrowOnError>({
        url: '/api/Auth/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const postApiAuthAssignRole = <ThrowOnError extends boolean = false>(options?: Options<PostApiAuthAssignRoleData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostApiAuthAssignRoleResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/Auth/assign-role',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const postApiAuthRemoveRole = <ThrowOnError extends boolean = false>(options?: Options<PostApiAuthRemoveRoleData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostApiAuthRemoveRoleResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/Auth/remove-role',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getApiAuthSearchUsers = <ThrowOnError extends boolean = false>(options?: Options<GetApiAuthSearchUsersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiAuthSearchUsersResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/Auth/search-users',
        ...options
    });
};

export const postApiAuthChangePassword = <ThrowOnError extends boolean = false>(options?: Options<PostApiAuthChangePasswordData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostApiAuthChangePasswordResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/Auth/change-password',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const deleteApiAuthDeleteUser = <ThrowOnError extends boolean = false>(options?: Options<DeleteApiAuthDeleteUserData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<DeleteApiAuthDeleteUserResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/Auth/delete-user',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getApiConversation = <ThrowOnError extends boolean = false>(options?: Options<GetApiConversationData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiConversationResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/Conversation',
        ...options
    });
};

export const postApiConversation = <ThrowOnError extends boolean = false>(options?: Options<PostApiConversationData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostApiConversationResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/Conversation',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getApiConversationById = <ThrowOnError extends boolean = false>(options: Options<GetApiConversationByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiConversationByIdResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/Conversation/{id}',
        ...options
    });
};

export const postApiConversationByConversationIdMessages = <ThrowOnError extends boolean = false>(options: Options<PostApiConversationByConversationIdMessagesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiConversationByConversationIdMessagesResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/Conversation/{conversationId}/messages',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getApiConversationByOpportunityByOpportunityId = <ThrowOnError extends boolean = false>(options: Options<GetApiConversationByOpportunityByOpportunityIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiConversationByOpportunityByOpportunityIdResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/Conversation/by-opportunity/{opportunityId}',
        ...options
    });
};

export const getApiDocumentOpportunityByOpportunityId = <ThrowOnError extends boolean = false>(options: Options<GetApiDocumentOpportunityByOpportunityIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiDocumentOpportunityByOpportunityIdResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/Document/opportunity/{opportunityId}',
        ...options
    });
};

export const getApiDocumentOpportunityByOpportunityIdPublic = <ThrowOnError extends boolean = false>(options: Options<GetApiDocumentOpportunityByOpportunityIdPublicData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiDocumentOpportunityByOpportunityIdPublicResponses, unknown, ThrowOnError>({
        url: '/api/Document/opportunity/{opportunityId}/public',
        ...options
    });
};

export const deleteApiDocumentById = <ThrowOnError extends boolean = false>(options: Options<DeleteApiDocumentByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteApiDocumentByIdResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/Document/{id}',
        ...options
    });
};

export const getApiDocumentById = <ThrowOnError extends boolean = false>(options: Options<GetApiDocumentByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiDocumentByIdResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/Document/{id}',
        ...options
    });
};

export const postApiDocumentUploadByOpportunityId = <ThrowOnError extends boolean = false>(options: Options<PostApiDocumentUploadByOpportunityIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiDocumentUploadByOpportunityIdResponses, unknown, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/Document/upload/{opportunityId}',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

export const getApiDocumentByIdDownload = <ThrowOnError extends boolean = false>(options: Options<GetApiDocumentByIdDownloadData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiDocumentByIdDownloadResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/Document/{id}/download',
        ...options
    });
};

/**
 * Publicly accessible endpoint to view images without authorization checks.
 * This is intended for use in public galleries or previews.
 */
export const getApiDocumentByIdView = <ThrowOnError extends boolean = false>(options: Options<GetApiDocumentByIdViewData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiDocumentByIdViewResponses, unknown, ThrowOnError>({
        url: '/api/Document/{id}/view',
        ...options
    });
};

export const getApiDocumentByIdUrl = <ThrowOnError extends boolean = false>(options: Options<GetApiDocumentByIdUrlData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiDocumentByIdUrlResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/Document/{id}/url',
        ...options
    });
};

export const putApiDocumentByIdApprove = <ThrowOnError extends boolean = false>(options: Options<PutApiDocumentByIdApproveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutApiDocumentByIdApproveResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/Document/{id}/approve',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Send an email using the configured SMTP settings
 */
export const postApiEmailSend = <ThrowOnError extends boolean = false>(options?: Options<PostApiEmailSendData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostApiEmailSendResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/Email/send',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get the current SMTP configuration status
 */
export const getApiEmailSmtpStatus = <ThrowOnError extends boolean = false>(options?: Options<GetApiEmailSmtpStatusData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiEmailSmtpStatusResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/Email/smtp-status',
        ...options
    });
};

/**
 * Invalidate the SMTP configuration cache
 */
export const postApiEmailClearCache = <ThrowOnError extends boolean = false>(options?: Options<PostApiEmailClearCacheData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostApiEmailClearCacheResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/Email/clear-cache',
        ...options
    });
};

/**
 * Invalidate the OAuth token cache for a specific configuration
 */
export const postApiEmailClearOauthCache = <ThrowOnError extends boolean = false>(options?: Options<PostApiEmailClearOauthCacheData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostApiEmailClearOauthCacheResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/Email/clear-oauth-cache',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getApiExternalIntegration = <ThrowOnError extends boolean = false>(options?: Options<GetApiExternalIntegrationData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiExternalIntegrationResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/ExternalIntegration',
        ...options
    });
};

export const postApiExternalIntegration = <ThrowOnError extends boolean = false>(options?: Options<PostApiExternalIntegrationData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostApiExternalIntegrationResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/ExternalIntegration',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const deleteApiExternalIntegrationById = <ThrowOnError extends boolean = false>(options: Options<DeleteApiExternalIntegrationByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteApiExternalIntegrationByIdResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/ExternalIntegration/{id}',
        ...options
    });
};

export const getApiExternalIntegrationById = <ThrowOnError extends boolean = false>(options: Options<GetApiExternalIntegrationByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiExternalIntegrationByIdResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/ExternalIntegration/{id}',
        ...options
    });
};

export const putApiExternalIntegrationById = <ThrowOnError extends boolean = false>(options: Options<PutApiExternalIntegrationByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutApiExternalIntegrationByIdResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/ExternalIntegration/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getApiFormTemplates = <ThrowOnError extends boolean = false>(options?: Options<GetApiFormTemplatesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiFormTemplatesResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/Form/templates',
        ...options
    });
};

export const postApiFormTemplates = <ThrowOnError extends boolean = false>(options?: Options<PostApiFormTemplatesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostApiFormTemplatesResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/Form/templates',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const deleteApiFormTemplatesById = <ThrowOnError extends boolean = false>(options: Options<DeleteApiFormTemplatesByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteApiFormTemplatesByIdResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/Form/templates/{id}',
        ...options
    });
};

export const getApiFormTemplatesById = <ThrowOnError extends boolean = false>(options: Options<GetApiFormTemplatesByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiFormTemplatesByIdResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/Form/templates/{id}',
        ...options
    });
};

export const putApiFormTemplatesById = <ThrowOnError extends boolean = false>(options: Options<PutApiFormTemplatesByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutApiFormTemplatesByIdResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/Form/templates/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postApiFormSubmissions = <ThrowOnError extends boolean = false>(options?: Options<PostApiFormSubmissionsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostApiFormSubmissionsResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/Form/submissions',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const deleteApiFormSubmissionsById = <ThrowOnError extends boolean = false>(options: Options<DeleteApiFormSubmissionsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteApiFormSubmissionsByIdResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/Form/submissions/{id}',
        ...options
    });
};

export const putApiFormSubmissionsById = <ThrowOnError extends boolean = false>(options: Options<PutApiFormSubmissionsByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutApiFormSubmissionsByIdResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/Form/submissions/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Example body: {value: "Some value", formTemplateItemId: "123e4567-e89b-12d3-a456-426614174000"}
 */
export const postApiFormSubmissionsByFormSubmissionIdItems = <ThrowOnError extends boolean = false>(options: Options<PostApiFormSubmissionsByFormSubmissionIdItemsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiFormSubmissionsByFormSubmissionIdItemsResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/Form/submissions/{formSubmissionId}/items',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const deleteApiFormSubmissionsByFormSubmissionIdItemsByFormSubmissionItemId = <ThrowOnError extends boolean = false>(options: Options<DeleteApiFormSubmissionsByFormSubmissionIdItemsByFormSubmissionItemIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteApiFormSubmissionsByFormSubmissionIdItemsByFormSubmissionItemIdResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/Form/submissions/{formSubmissionId}/items/{formSubmissionItemId}',
        ...options
    });
};

export const putApiFormSubmissionsByFormSubmissionIdItemsByFormSubmissionItemId = <ThrowOnError extends boolean = false>(options: Options<PutApiFormSubmissionsByFormSubmissionIdItemsByFormSubmissionItemIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutApiFormSubmissionsByFormSubmissionIdItemsByFormSubmissionItemIdResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/Form/submissions/{formSubmissionId}/items/{formSubmissionItemId}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getUp = <ThrowOnError extends boolean = false>(options?: Options<GetUpData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUpResponses, unknown, ThrowOnError>({
        url: '/up',
        ...options
    });
};

export const postApiLead = <ThrowOnError extends boolean = false>(options?: Options<PostApiLeadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostApiLeadResponses, unknown, ThrowOnError>({
        url: '/api/Lead',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Delete the current OAuth email configuration
 */
export const deleteApiOAuthEmailConfig = <ThrowOnError extends boolean = false>(options?: Options<DeleteApiOAuthEmailConfigData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<DeleteApiOAuthEmailConfigResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/OAuthEmailConfig',
        ...options
    });
};

/**
 * Get the current OAuth email configuration
 */
export const getApiOAuthEmailConfig = <ThrowOnError extends boolean = false>(options?: Options<GetApiOAuthEmailConfigData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiOAuthEmailConfigResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/OAuthEmailConfig',
        ...options
    });
};

/**
 * Create a new OAuth email configuration
 */
export const postApiOAuthEmailConfig = <ThrowOnError extends boolean = false>(options?: Options<PostApiOAuthEmailConfigData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostApiOAuthEmailConfigResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/OAuthEmailConfig',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Update the current OAuth email configuration
 */
export const putApiOAuthEmailConfig = <ThrowOnError extends boolean = false>(options?: Options<PutApiOAuthEmailConfigData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<PutApiOAuthEmailConfigResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/OAuthEmailConfig',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getApiOpportunityByIdImagesZip = <ThrowOnError extends boolean = false>(options: Options<GetApiOpportunityByIdImagesZipData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiOpportunityByIdImagesZipResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/Opportunity/{id}/images-zip',
        ...options
    });
};

export const getApiOpportunity = <ThrowOnError extends boolean = false>(options?: Options<GetApiOpportunityData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiOpportunityResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/Opportunity',
        ...options
    });
};

export const postApiOpportunity = <ThrowOnError extends boolean = false>(options?: Options<PostApiOpportunityData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostApiOpportunityResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/Opportunity',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const deleteApiOpportunityById = <ThrowOnError extends boolean = false>(options: Options<DeleteApiOpportunityByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteApiOpportunityByIdResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/Opportunity/{id}',
        ...options
    });
};

export const getApiOpportunityById = <ThrowOnError extends boolean = false>(options: Options<GetApiOpportunityByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiOpportunityByIdResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/Opportunity/{id}',
        ...options
    });
};

export const patchApiOpportunityById = <ThrowOnError extends boolean = false>(options: Options<PatchApiOpportunityByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchApiOpportunityByIdResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/Opportunity/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const putApiOpportunityById = <ThrowOnError extends boolean = false>(options: Options<PutApiOpportunityByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutApiOpportunityByIdResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/Opportunity/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getApiOpportunityAgentByAgentId = <ThrowOnError extends boolean = false>(options: Options<GetApiOpportunityAgentByAgentIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiOpportunityAgentByAgentIdResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/Opportunity/agent/{agentId}',
        ...options
    });
};

export const getApiOpportunityOrganizationByOrganizationId = <ThrowOnError extends boolean = false>(options: Options<GetApiOpportunityOrganizationByOrganizationIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiOpportunityOrganizationByOrganizationIdResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/Opportunity/organization/{organizationId}',
        ...options
    });
};

export const getApiOpportunityState = <ThrowOnError extends boolean = false>(options?: Options<GetApiOpportunityStateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiOpportunityStateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/OpportunityState',
        ...options
    });
};

export const postApiOpportunityState = <ThrowOnError extends boolean = false>(options?: Options<PostApiOpportunityStateData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostApiOpportunityStateResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/OpportunityState',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const deleteApiOpportunityStateByLabel = <ThrowOnError extends boolean = false>(options: Options<DeleteApiOpportunityStateByLabelData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteApiOpportunityStateByLabelResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/OpportunityState/{label}',
        ...options
    });
};

export const getApiOpportunityStateByLabel = <ThrowOnError extends boolean = false>(options: Options<GetApiOpportunityStateByLabelData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiOpportunityStateByLabelResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/OpportunityState/{label}',
        ...options
    });
};

export const putApiOpportunityStateByLabel = <ThrowOnError extends boolean = false>(options: Options<PutApiOpportunityStateByLabelData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutApiOpportunityStateByLabelResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/OpportunityState/{label}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getApiOrganization = <ThrowOnError extends boolean = false>(options?: Options<GetApiOrganizationData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiOrganizationResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/Organization',
        ...options
    });
};

export const postApiOrganization = <ThrowOnError extends boolean = false>(options?: Options<PostApiOrganizationData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostApiOrganizationResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/Organization',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const deleteApiOrganizationById = <ThrowOnError extends boolean = false>(options: Options<DeleteApiOrganizationByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteApiOrganizationByIdResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/Organization/{id}',
        ...options
    });
};

export const getApiOrganizationById = <ThrowOnError extends boolean = false>(options: Options<GetApiOrganizationByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiOrganizationByIdResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/Organization/{id}',
        ...options
    });
};

export const putApiOrganizationById = <ThrowOnError extends boolean = false>(options: Options<PutApiOrganizationByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutApiOrganizationByIdResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/Organization/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getApiOrganizationByIdMembers = <ThrowOnError extends boolean = false>(options: Options<GetApiOrganizationByIdMembersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiOrganizationByIdMembersResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/Organization/{id}/members',
        ...options
    });
};

export const postApiOrganizationByIdMembers = <ThrowOnError extends boolean = false>(options: Options<PostApiOrganizationByIdMembersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiOrganizationByIdMembersResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/Organization/{id}/members',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const putApiOrganizationByIdMembersByMemberIdRole = <ThrowOnError extends boolean = false>(options: Options<PutApiOrganizationByIdMembersByMemberIdRoleData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutApiOrganizationByIdMembersByMemberIdRoleResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/Organization/{id}/members/{memberId}/role',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const deleteApiOrganizationByIdMembersByMemberId = <ThrowOnError extends boolean = false>(options: Options<DeleteApiOrganizationByIdMembersByMemberIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteApiOrganizationByIdMembersByMemberIdResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/Organization/{id}/members/{memberId}',
        ...options
    });
};

export const postApiProfilePictureUser = <ThrowOnError extends boolean = false>(options?: Options<PostApiProfilePictureUserData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostApiProfilePictureUserResponses, unknown, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/ProfilePicture/user',
        ...options,
        headers: {
            'Content-Type': null,
            ...options?.headers
        }
    });
};

export const postApiProfilePictureOrganizationByOrganizationId = <ThrowOnError extends boolean = false>(options: Options<PostApiProfilePictureOrganizationByOrganizationIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiProfilePictureOrganizationByOrganizationIdResponses, unknown, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/ProfilePicture/organization/{organizationId}',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

export const getApiProfilePictureUrl = <ThrowOnError extends boolean = false>(options?: Options<GetApiProfilePictureUrlData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiProfilePictureUrlResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/ProfilePicture/url',
        ...options
    });
};

export const deleteApiProfilePicture = <ThrowOnError extends boolean = false>(options?: Options<DeleteApiProfilePictureData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<DeleteApiProfilePictureResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/ProfilePicture',
        ...options
    });
};

export const getApiTask = <ThrowOnError extends boolean = false>(options?: Options<GetApiTaskData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetApiTaskResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/Task',
        ...options
    });
};

export const postApiTask = <ThrowOnError extends boolean = false>(options?: Options<PostApiTaskData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostApiTaskResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/Task',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const deleteApiTaskById = <ThrowOnError extends boolean = false>(options: Options<DeleteApiTaskByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteApiTaskByIdResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/Task/{id}',
        ...options
    });
};

export const getApiTaskById = <ThrowOnError extends boolean = false>(options: Options<GetApiTaskByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiTaskByIdResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/Task/{id}',
        ...options
    });
};

export const putApiTaskById = <ThrowOnError extends boolean = false>(options: Options<PutApiTaskByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<PutApiTaskByIdResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/Task/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postApiTaskByIdComplete = <ThrowOnError extends boolean = false>(options: Options<PostApiTaskByIdCompleteData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostApiTaskByIdCompleteResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/Task/{id}/complete',
        ...options
    });
};

export const postApiTaskAgentTag = <ThrowOnError extends boolean = false>(options?: Options<PostApiTaskAgentTagData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostApiTaskAgentTagResponses, unknown, ThrowOnError>({
        security: [
            {
                name: 'Authorization',
                type: 'apiKey'
            }
        ],
        url: '/api/Task/agent-tag',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Get vehicle data by registration number from Norwegian Vehicle Registry (NVDB)
 */
export const getApiVehicleByRegistrationNumber = <ThrowOnError extends boolean = false>(options: Options<GetApiVehicleByRegistrationNumberData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetApiVehicleByRegistrationNumberResponses, GetApiVehicleByRegistrationNumberErrors, ThrowOnError>({
        url: '/api/Vehicle/{registrationNumber}',
        ...options
    });
};